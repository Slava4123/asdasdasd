import os
import asyncio
import asyncpg
from dotenv import load_dotenv

load_dotenv()


class VMServer:
    """–°–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –º–∞—à–∏–Ω–∞–º–∏ —Å —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î."""

    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ db_pool
        self.db_pool = None

    async def start(self, host='0.0.0.0', port=8888):
        """
        –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        :param host: –ê–¥—Ä–µ—Å —Ö–æ—Å—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        :param port: –ü–æ—Ä—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        """
        try:
            db_host = os.getenv("DB_HOST")
            db_port = os.getenv("DB_PORT")
            db_user = os.getenv("DB_USER")
            db_password = os.getenv("DB_PASSWORD")
            db_name = os.getenv("DB_NAME")

            self.db_pool = await asyncpg.create_pool(
                user=db_user,
                password=db_password,
                database=db_name,
                host=db_host,
                port=db_port
            )
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

            async with self.db_pool.acquire() as conn:
                await conn.execute('''CREATE TABLE IF NOT EXISTS vms (
                        id TEXT PRIMARY KEY,
                        ram INT NOT NULL,
                        cpu INT NOT NULL,
                        is_active BOOLEAN DEFAULT FALSE,
                        is_auth BOOLEAN DEFAULT FALSE
                    )
                ''')
                await conn.execute('''CREATE TABLE IF NOT EXISTS disks (
                        id TEXT PRIMARY KEY,
                        vm_id TEXT REFERENCES vms(id) ON DELETE CASCADE,
                        size INT NOT NULL
                    )
                ''')
                print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã")

            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
            server = await asyncio.start_server(
                self.handle_client,
                host,
                port
            )
            print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {host}:{port}")

            async with server:
                await server.serve_forever()

        except Exception as e:
            print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise

    async def handle_client(self, reader, writer):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤.

        :param reader: –ö–∞–Ω–∞–ª —á—Ç–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        :param writer: –ö–∞–Ω–∞–ª –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        """
        addr = writer.get_extra_info('peername')
        print(f"–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {addr}")
        try:
            while True:
                data = await reader.read(100)
                if not data:
                    break
                message = data.decode().strip()
                print(f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {addr}: {message}")
                response = await self.process_command(message)
                writer.write(response.encode())
                await writer.drain()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å {addr}: {e}")
        finally:
            print(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {addr} –∑–∞–∫—Ä—ã—Ç–æ")
            writer.close()

    async def process_command(self, message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∫–ª–∏–µ–Ω—Ç–∞.

        :param message: –ö–æ–º–∞–Ω–¥–∞, –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        :return: –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É
        """
        parts = message.split()
        if not parts:
            return "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"

        command = parts[0].upper()
        handlers = {
            "AUTH": self.authenticate_vm,
            "ADD_VM": self.add_vm,
            "LIST_VMS": self.list_vms,
            "LIST_AUTH_VMS": self.list_authenticated_vms,
            "UPDATE_VM": self.update_vm,
            "LOGOUT": self.logout_vm,
            "LIST_DISKS": self.list_disks,
            "REMOVE_VM": self.remove_vm,
            "ADD_DISK": self.add_disk,
            "REMOVE_DISK": self.remove_disk,
            "CHECK_ALL_VMS": self.check_all_vms,
        }

        handler = handlers.get(command)
        if not handler:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"

        try:
            return await handler(parts[1:])
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"

    async def authenticate_vm(self, args):
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã.

        :param args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        if len(args) != 3:
            return "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ AUTH. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: AUTH <vm_id> <ram> <cpu>"

        vm_id, ram, cpu = args
        try:
            ram = int(ram)
            cpu = int(cpu)
        except ValueError:
            return "–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è RAM –∏–ª–∏ CPU"

        async with self.db_pool.acquire() as conn:
            existing = await conn.fetchrow(
                "SELECT ram, cpu FROM vms WHERE id = $1",
                vm_id
            )

            if existing:
                if existing['ram'] == ram and existing['cpu'] == cpu:
                    await conn.execute(
                        "UPDATE vms SET is_active = TRUE, is_auth = TRUE WHERE id = $1",
                        vm_id
                    )
                    return f"–í–ú {vm_id} –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞"
                return "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"

            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            try:
                await conn.execute(
                    "INSERT INTO vms (id, ram, cpu, is_active, is_auth) "
                    "VALUES ($1, $2, $3, TRUE, TRUE)",
                    vm_id, ram, cpu
                )
                return f"–í–ú {vm_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞"
            except asyncpg.UniqueViolationError:
                return f"–í–ú {vm_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

    async def add_vm(self, args):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã.

        :param args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –í–ú
        """
        if len(args) != 3:
            return "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ADD_VM. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ADD_VM <vm_id> <ram> <cpu>"

        vm_id, ram, cpu = args
        try:
            ram = int(ram)
            cpu = int(cpu)
        except ValueError:
            return "–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è RAM –∏–ª–∏ CPU"

        async with self.db_pool.acquire() as conn:
            try:
                await conn.execute(
                    "INSERT INTO vms (id, ram, cpu, is_active) "
                    "VALUES ($1, $2, $3, TRUE)",
                    vm_id, ram, cpu
                )
                return f"–í–ú {vm_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            except asyncpg.UniqueViolationError:
                return f"–í–ú {vm_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

    async def list_vms(self, _=None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω.

        :return: –°–ø–∏—Å–æ–∫ –í–ú
        """
        async with self.db_pool.acquire() as conn:
            records = await conn.fetch("SELECT * FROM vms WHERE is_active = TRUE")
            if not records:
                return "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

            return "\n".join(
                [f"{r['id']}: {r['ram']}MB RAM, {r['cpu']}CPU" for r in records]
            )

    async def list_authenticated_vms(self, _=None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω.

        :return: –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –í–ú
        """
        async with self.db_pool.acquire() as conn:
            records = await conn.fetch(
                "SELECT * FROM vms WHERE is_auth = TRUE AND is_active = TRUE"
            )
            if not records:
                return "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –í–ú –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

            return "\n".join(
                [f"{r['id']}: {r['ram']}MB RAM, {r['cpu']}CPU" for r in records]
            )

    async def update_vm(self, args):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã.

        :param args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –í–ú
        """
        if len(args) != 3:
            return "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ UPDATE_VM. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: UPDATE_VM <id> <ram> <cpu>"

        vm_id, ram, cpu = args
        try:
            ram = int(ram)
            cpu = int(cpu)
        except ValueError:
            return "–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è RAM –∏–ª–∏ CPU"

        async with self.db_pool.acquire() as conn:
            result = await conn.execute(
                "UPDATE vms SET ram = $2, cpu = $3 WHERE id = $1",
                vm_id, ram, cpu
            )
            if result == "UPDATE 0":
                return "–í–ú –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            return f"–í–ú {vm_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞"

    async def logout_vm(self, args):
        """
        –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã).

        :param args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ö–æ–¥–∞
        """
        if len(args) != 1:
            return "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ LOGOUT. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: LOGOUT <vm_id>"

        vm_id = args[0]
        async with self.db_pool.acquire() as conn:
            result = await conn.execute(
                "UPDATE vms SET is_auth = FALSE WHERE id = $1",
                vm_id
            )
            if result == "UPDATE 0":
                return "–í–ú –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            return f"–í–ú {vm_id} –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞"

    async def list_disks(self, _=None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–∏—Å–∫–æ–≤.

        :return: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏—Å–∫–æ–≤
        """
        async with self.db_pool.acquire() as conn:
            records = await conn.fetch(
                "SELECT d.id, d.size, v.id as vm_id "
                "FROM disks d LEFT JOIN vms v ON d.vm_id = v.id"
            )
            if not records:
                return "–î–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

            return "\n".join(
                [f"Disk {r['id']} (VM {r['vm_id']}): {r['size']}GB" for r in records]
            )

    async def add_disk(self, args):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å–∫–∞ –∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ.

        :param args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏—Å–∫–∞
        """
        if len(args) != 3:
            return "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ADD_DISK. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ADD_DISK <disk_id> <vm_id> <size>"

        disk_id, vm_id, size = args
        try:
            size = int(size)
        except ValueError:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞"

        async with self.db_pool.acquire() as conn:
            vm_exists = await conn.fetchrow("SELECT id FROM vms WHERE id = $1", vm_id)
            if not vm_exists:
                return f"–í–ú {vm_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

            await conn.execute(
                "INSERT INTO disks (id, vm_id, size) VALUES ($1, $2, $3)",
                disk_id, vm_id, size
            )
            return f"–î–∏—Å–∫ {disk_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –í–ú {vm_id}"

    async def remove_vm(self, args):
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã.

        :param args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –í–ú
        """
        if len(args) != 1:
            return "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ REMOVE. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: REMOVE <vm_id>"

        vm_id = args[0]

        async with self.db_pool.acquire() as conn:
            result = await conn.execute(
                "UPDATE vms SET is_active = FALSE, is_auth = FALSE WHERE id = $1", vm_id
            )

            if result == "UPDATE 0":
                return f"–í–ú {vm_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

            return f"–í–ú {vm_id} —É–¥–∞–ª–µ–Ω–∞"

    async def remove_disk(self, args):
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Å–∫–∞ –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã.

        :param args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Å–∫–∞
        """
        if len(args) != 1:
            return "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ REMOVE_DISK. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: REMOVE_DISK <disk_id>"

        disk_id = args[0]

        async with self.db_pool.acquire() as conn:
            result = await conn.execute("DELETE FROM disks WHERE id = $1", disk_id)

            if result == "DELETE 0":
                return f"–î–∏—Å–∫ {disk_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"

            return f"–î–∏—Å–∫ {disk_id} —É–¥–∞–ª–µ–Ω"

    async def check_all_vms(self, _=None):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω.

        :return: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –í–ú
        """
        async with self.db_pool.acquire() as conn:
            records = await conn.fetch("SELECT * FROM vms")
            if not records:
                return "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

            return "\n".join(
                [f"{r['id']}: {r['ram']}MB RAM, {r['cpu']}CPU" for r in records]
            )


if __name__ == '__main__':
    try:
        print("‚è≥ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
        server = VMServer()
        asyncio.run(server.start())
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
